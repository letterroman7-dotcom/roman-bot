import{AntiNukeService,DEFAULT_CONFIG}from"../modules/antinuke/service.js";import{getLogger}from"../utils/logger.pino.js";const log=await getLogger("cli");function print(o){console.log(JSON.stringify(o,null,2))}function usageAndExit(){console.log(`Roman Bot â€” CLI (North Star v1)\nUsage:\n  node cli/cli.js ping\n  node cli/cli.js antinuke status\n  node cli/cli.js antinuke simulate <eventType> <count>\n\nSupported event types: ${Object.keys(DEFAULT_CONFIG.scorePerEvent).join(", ")}\n`);process.exit(1)}async function main(argv){const[cmd="",sub="",a="",b=""]=argv.slice(2);if(!cmd)return usageAndExit();if(cmd==="ping"){print({ok:true,cmd:"ping",node:process.version,ts:Date.now()});return}if(cmd==="antinuke"){const svc=new AntiNukeService();if(sub==="status"){const out=svc.status();print({ok:true,cmd:"antinuke status",...out});return}if(sub==="simulate"){const eventType=a;const count=Number.isFinite(Number(b))?Number(b):1;if(!eventType){log.warn("Missing eventType for simulate");usageAndExit();return}try{const out=svc.simulate(eventType,count);print({ok:true,cmd:"antinuke simulate",eventType,count,...out});return}catch(e){print({ok:false,error:String(e&&e.message||e)});process.exitCode=1;return}}return usageAndExit()}return usageAndExit()}main(process.argv).catch(err=>{log.error({err},"CLI crashed");process.exitCode=1});