/* Auto-writes .handoff/context.json with environment + git + project info.
 * Safe: no secrets are stored (tokens are redacted).
 */

const fs = require("fs");
const path = require("path");
const os = require("os");
const cp = require("child_process");

const ROOT = process.cwd();
const OUT_DIR = path.join(ROOT, ".handoff");
const OUT_FILE = path.join(OUT_DIR, "context.json");

function ex(cmd) {
  try {
    return cp.execSync(cmd, { stdio: ["ignore", "pipe", "ignore"] }).toString().trim();
  } catch {
    return null;
  }
}

function getGit() {
  const commit = ex("git rev-parse --short HEAD");
  const branch = ex("git symbolic-ref --short HEAD") || ex("git rev-parse --abbrev-ref HEAD");
  const status = ex("git status --porcelain");
  const tag = ex("git describe --tags --abbrev=0");
  return {
    commit: commit || "",
    branch: branch || "",
    tag: tag || "",
    dirty: !!(status && status.length),
  };
}

function redactToken(tok) {
  if (!tok) return undefined;
  const s = String(tok);
  const tail = s.slice(-4);
  return `***redacted***${tail}`;
}

function safeReadJSON(p) {
  try {
    return JSON.parse(fs.readFileSync(p, "utf8"));
  } catch {
    return null;
  }
}

const pkgPath = path.join(ROOT, "package.json");
const pkg = safeReadJSON(pkgPath) || {};
const deps = Object.assign({}, pkg.dependencies || {}, pkg.devDependencies || {});
const versions = {};
["discord.js", "pino"].forEach((name) => {
  if (deps[name]) versions[name] = deps[name];
});

const files = {
  ".env": fs.existsSync(path.join(ROOT, ".env")) ? "present" : "missing",
  "data/feature-flags.json": fs.existsSync(path.join(ROOT, "data", "feature-flags.json")) ? "present" : "missing",
  "data/antinuke-config.json": fs.existsSync(path.join(ROOT, "data", "antinuke-config.json")) ? "present" : "missing",
};

const flags = {
  discordWiring: fs.existsSync(path.join(ROOT, "src", "discord", "run.js")),
};

const env = {};
if (process.env.DISCORD_TOKEN) env.DISCORD_TOKEN = redactToken(process.env.DISCORD_TOKEN);
if (process.env.BOT_TOKEN && !env.DISCORD_TOKEN) env.DISCORD_TOKEN = redactToken(process.env.BOT_TOKEN);

const snapshot = {
  project: {
    name: pkg.name || "Roman Bot",
    path: ROOT,
    version: pkg.version || "0.0.0",
    node: process.version,
    platform: `${os.platform()}/${os.release()}/${os.arch()}`,
  },
  session: {
    generatedAt: new Date().toISOString(),
    owner: (() => {
      try { return os.userInfo().username; } catch { return ""; }
    })(),
    purpose: "Auto snapshot for handoff between ChatGPT sessions",
  },
  entry: { script: "src/discord/run.js" },
  git: getGit(),
  files,
  env,
  flags,
  scriptsKnown: Object.keys(pkg.scripts || {}),
  versions,
  notes: [
    "This file is safe to share in ChatGPT for context handoff.",
    "Tokens are redacted automatically.",
    "Generated by scripts/handoff-snapshot.cjs",
  ],
};

fs.mkdirSync(OUT_DIR, { recursive: true });
fs.writeFileSync(OUT_FILE, JSON.stringify(snapshot, null, 2), "utf8");

console.log(`handoff: saved to ${OUT_FILE}`);